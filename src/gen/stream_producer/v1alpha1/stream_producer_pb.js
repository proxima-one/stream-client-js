// source: stream_producer/v1alpha1/stream_producer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var model_v1_model_pb = require('../../model/v1/model_pb.js');
goog.object.extend(proto, model_v1_model_pb);
goog.exportSymbol('proto.stream_producer.v1alpha1.CreateProducerRequest', null, global);
goog.exportSymbol('proto.stream_producer.v1alpha1.CreateProducerResponse', null, global);
goog.exportSymbol('proto.stream_producer.v1alpha1.GetProducerRequest', null, global);
goog.exportSymbol('proto.stream_producer.v1alpha1.GetProducerResponse', null, global);
goog.exportSymbol('proto.stream_producer.v1alpha1.ProduceEventsRequest', null, global);
goog.exportSymbol('proto.stream_producer.v1alpha1.ProduceEventsResponse', null, global);
goog.exportSymbol('proto.stream_producer.v1alpha1.Producer', null, global);
goog.exportSymbol('proto.stream_producer.v1alpha1.ProducerState', null, global);
goog.exportSymbol('proto.stream_producer.v1alpha1.StreamEvents', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_producer.v1alpha1.ProducerState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stream_producer.v1alpha1.ProducerState.repeatedFields_, null);
};
goog.inherits(proto.stream_producer.v1alpha1.ProducerState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_producer.v1alpha1.ProducerState.displayName = 'proto.stream_producer.v1alpha1.ProducerState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_producer.v1alpha1.Producer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stream_producer.v1alpha1.Producer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_producer.v1alpha1.Producer.displayName = 'proto.stream_producer.v1alpha1.Producer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_producer.v1alpha1.StreamEvents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stream_producer.v1alpha1.StreamEvents.repeatedFields_, null);
};
goog.inherits(proto.stream_producer.v1alpha1.StreamEvents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_producer.v1alpha1.StreamEvents.displayName = 'proto.stream_producer.v1alpha1.StreamEvents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_producer.v1alpha1.CreateProducerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stream_producer.v1alpha1.CreateProducerRequest.repeatedFields_, null);
};
goog.inherits(proto.stream_producer.v1alpha1.CreateProducerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_producer.v1alpha1.CreateProducerRequest.displayName = 'proto.stream_producer.v1alpha1.CreateProducerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_producer.v1alpha1.CreateProducerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stream_producer.v1alpha1.CreateProducerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_producer.v1alpha1.CreateProducerResponse.displayName = 'proto.stream_producer.v1alpha1.CreateProducerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_producer.v1alpha1.GetProducerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stream_producer.v1alpha1.GetProducerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_producer.v1alpha1.GetProducerRequest.displayName = 'proto.stream_producer.v1alpha1.GetProducerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_producer.v1alpha1.GetProducerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stream_producer.v1alpha1.GetProducerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_producer.v1alpha1.GetProducerResponse.displayName = 'proto.stream_producer.v1alpha1.GetProducerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stream_producer.v1alpha1.ProduceEventsRequest.repeatedFields_, null);
};
goog.inherits(proto.stream_producer.v1alpha1.ProduceEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_producer.v1alpha1.ProduceEventsRequest.displayName = 'proto.stream_producer.v1alpha1.ProduceEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_producer.v1alpha1.ProduceEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stream_producer.v1alpha1.ProduceEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_producer.v1alpha1.ProduceEventsResponse.displayName = 'proto.stream_producer.v1alpha1.ProduceEventsResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stream_producer.v1alpha1.ProducerState.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_producer.v1alpha1.ProducerState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_producer.v1alpha1.ProducerState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.ProducerState.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputStreamsList: jspb.Message.toObjectList(msg.getInputStreamsList(),
    model_v1_model_pb.StreamStateRef.toObject, includeInstance),
    outputStreamsList: jspb.Message.toObjectList(msg.getOutputStreamsList(),
    model_v1_model_pb.StreamStateRef.toObject, includeInstance),
    userData: msg.getUserData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_producer.v1alpha1.ProducerState}
 */
proto.stream_producer.v1alpha1.ProducerState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_producer.v1alpha1.ProducerState;
  return proto.stream_producer.v1alpha1.ProducerState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_producer.v1alpha1.ProducerState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_producer.v1alpha1.ProducerState}
 */
proto.stream_producer.v1alpha1.ProducerState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_v1_model_pb.StreamStateRef;
      reader.readMessage(value,model_v1_model_pb.StreamStateRef.deserializeBinaryFromReader);
      msg.addInputStreams(value);
      break;
    case 2:
      var value = new model_v1_model_pb.StreamStateRef;
      reader.readMessage(value,model_v1_model_pb.StreamStateRef.deserializeBinaryFromReader);
      msg.addOutputStreams(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_producer.v1alpha1.ProducerState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_producer.v1alpha1.ProducerState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.ProducerState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      model_v1_model_pb.StreamStateRef.serializeBinaryToWriter
    );
  }
  f = message.getOutputStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      model_v1_model_pb.StreamStateRef.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * repeated model.v1.StreamStateRef input_streams = 1;
 * @return {!Array<!proto.model.v1.StreamStateRef>}
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.getInputStreamsList = function() {
  return /** @type{!Array<!proto.model.v1.StreamStateRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_v1_model_pb.StreamStateRef, 1));
};


/**
 * @param {!Array<!proto.model.v1.StreamStateRef>} value
 * @return {!proto.stream_producer.v1alpha1.ProducerState} returns this
*/
proto.stream_producer.v1alpha1.ProducerState.prototype.setInputStreamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.v1.StreamStateRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.v1.StreamStateRef}
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.addInputStreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.v1.StreamStateRef, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stream_producer.v1alpha1.ProducerState} returns this
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.clearInputStreamsList = function() {
  return this.setInputStreamsList([]);
};


/**
 * repeated model.v1.StreamStateRef output_streams = 2;
 * @return {!Array<!proto.model.v1.StreamStateRef>}
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.getOutputStreamsList = function() {
  return /** @type{!Array<!proto.model.v1.StreamStateRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_v1_model_pb.StreamStateRef, 2));
};


/**
 * @param {!Array<!proto.model.v1.StreamStateRef>} value
 * @return {!proto.stream_producer.v1alpha1.ProducerState} returns this
*/
proto.stream_producer.v1alpha1.ProducerState.prototype.setOutputStreamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.v1.StreamStateRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.v1.StreamStateRef}
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.addOutputStreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.v1.StreamStateRef, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stream_producer.v1alpha1.ProducerState} returns this
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.clearOutputStreamsList = function() {
  return this.setOutputStreamsList([]);
};


/**
 * optional bytes user_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.getUserData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes user_data = 3;
 * This is a type-conversion wrapper around `getUserData()`
 * @return {string}
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.getUserData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserData()));
};


/**
 * optional bytes user_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserData()`
 * @return {!Uint8Array}
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.getUserData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.stream_producer.v1alpha1.ProducerState} returns this
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.setUserData = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.stream_producer.v1alpha1.ProducerState} returns this
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.clearUserData = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_producer.v1alpha1.ProducerState.prototype.hasUserData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_producer.v1alpha1.Producer.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_producer.v1alpha1.Producer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_producer.v1alpha1.Producer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.Producer.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.stream_producer.v1alpha1.ProducerState.toObject(includeInstance, f),
    updateToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_producer.v1alpha1.Producer}
 */
proto.stream_producer.v1alpha1.Producer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_producer.v1alpha1.Producer;
  return proto.stream_producer.v1alpha1.Producer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_producer.v1alpha1.Producer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_producer.v1alpha1.Producer}
 */
proto.stream_producer.v1alpha1.Producer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.stream_producer.v1alpha1.ProducerState;
      reader.readMessage(value,proto.stream_producer.v1alpha1.ProducerState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdateToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_producer.v1alpha1.Producer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_producer.v1alpha1.Producer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_producer.v1alpha1.Producer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.Producer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.stream_producer.v1alpha1.ProducerState.serializeBinaryToWriter
    );
  }
  f = message.getUpdateToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ProducerState state = 1;
 * @return {?proto.stream_producer.v1alpha1.ProducerState}
 */
proto.stream_producer.v1alpha1.Producer.prototype.getState = function() {
  return /** @type{?proto.stream_producer.v1alpha1.ProducerState} */ (
    jspb.Message.getWrapperField(this, proto.stream_producer.v1alpha1.ProducerState, 1));
};


/**
 * @param {?proto.stream_producer.v1alpha1.ProducerState|undefined} value
 * @return {!proto.stream_producer.v1alpha1.Producer} returns this
*/
proto.stream_producer.v1alpha1.Producer.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.stream_producer.v1alpha1.Producer} returns this
 */
proto.stream_producer.v1alpha1.Producer.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_producer.v1alpha1.Producer.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string update_token = 2;
 * @return {string}
 */
proto.stream_producer.v1alpha1.Producer.prototype.getUpdateToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.stream_producer.v1alpha1.Producer} returns this
 */
proto.stream_producer.v1alpha1.Producer.prototype.setUpdateToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stream_producer.v1alpha1.StreamEvents.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_producer.v1alpha1.StreamEvents.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_producer.v1alpha1.StreamEvents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_producer.v1alpha1.StreamEvents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.StreamEvents.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    model_v1_model_pb.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_producer.v1alpha1.StreamEvents}
 */
proto.stream_producer.v1alpha1.StreamEvents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_producer.v1alpha1.StreamEvents;
  return proto.stream_producer.v1alpha1.StreamEvents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_producer.v1alpha1.StreamEvents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_producer.v1alpha1.StreamEvents}
 */
proto.stream_producer.v1alpha1.StreamEvents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamId(value);
      break;
    case 2:
      var value = new model_v1_model_pb.Event;
      reader.readMessage(value,model_v1_model_pb.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_producer.v1alpha1.StreamEvents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_producer.v1alpha1.StreamEvents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_producer.v1alpha1.StreamEvents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.StreamEvents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      model_v1_model_pb.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional string stream_id = 1;
 * @return {string}
 */
proto.stream_producer.v1alpha1.StreamEvents.prototype.getStreamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stream_producer.v1alpha1.StreamEvents} returns this
 */
proto.stream_producer.v1alpha1.StreamEvents.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated model.v1.Event events = 2;
 * @return {!Array<!proto.model.v1.Event>}
 */
proto.stream_producer.v1alpha1.StreamEvents.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.model.v1.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_v1_model_pb.Event, 2));
};


/**
 * @param {!Array<!proto.model.v1.Event>} value
 * @return {!proto.stream_producer.v1alpha1.StreamEvents} returns this
*/
proto.stream_producer.v1alpha1.StreamEvents.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.v1.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.v1.Event}
 */
proto.stream_producer.v1alpha1.StreamEvents.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.v1.Event, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stream_producer.v1alpha1.StreamEvents} returns this
 */
proto.stream_producer.v1alpha1.StreamEvents.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_producer.v1alpha1.CreateProducerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_producer.v1alpha1.CreateProducerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outputStreamsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    force: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    userData: msg.getUserData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_producer.v1alpha1.CreateProducerRequest}
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_producer.v1alpha1.CreateProducerRequest;
  return proto.stream_producer.v1alpha1.CreateProducerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_producer.v1alpha1.CreateProducerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_producer.v1alpha1.CreateProducerRequest}
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addOutputStreams(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_producer.v1alpha1.CreateProducerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_producer.v1alpha1.CreateProducerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutputStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getForce();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stream_producer.v1alpha1.CreateProducerRequest} returns this
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string output_streams = 2;
 * @return {!Array<string>}
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.getOutputStreamsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.stream_producer.v1alpha1.CreateProducerRequest} returns this
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.setOutputStreamsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.stream_producer.v1alpha1.CreateProducerRequest} returns this
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.addOutputStreams = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stream_producer.v1alpha1.CreateProducerRequest} returns this
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.clearOutputStreamsList = function() {
  return this.setOutputStreamsList([]);
};


/**
 * optional bool force = 3;
 * @return {boolean}
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.stream_producer.v1alpha1.CreateProducerRequest} returns this
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.setForce = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bytes user_data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.getUserData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes user_data = 4;
 * This is a type-conversion wrapper around `getUserData()`
 * @return {string}
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.getUserData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserData()));
};


/**
 * optional bytes user_data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserData()`
 * @return {!Uint8Array}
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.getUserData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.stream_producer.v1alpha1.CreateProducerRequest} returns this
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.setUserData = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.stream_producer.v1alpha1.CreateProducerRequest} returns this
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.clearUserData = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_producer.v1alpha1.CreateProducerRequest.prototype.hasUserData = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_producer.v1alpha1.CreateProducerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_producer.v1alpha1.CreateProducerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_producer.v1alpha1.CreateProducerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.CreateProducerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    producer: (f = msg.getProducer()) && proto.stream_producer.v1alpha1.Producer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_producer.v1alpha1.CreateProducerResponse}
 */
proto.stream_producer.v1alpha1.CreateProducerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_producer.v1alpha1.CreateProducerResponse;
  return proto.stream_producer.v1alpha1.CreateProducerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_producer.v1alpha1.CreateProducerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_producer.v1alpha1.CreateProducerResponse}
 */
proto.stream_producer.v1alpha1.CreateProducerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.stream_producer.v1alpha1.Producer;
      reader.readMessage(value,proto.stream_producer.v1alpha1.Producer.deserializeBinaryFromReader);
      msg.setProducer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_producer.v1alpha1.CreateProducerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_producer.v1alpha1.CreateProducerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_producer.v1alpha1.CreateProducerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.CreateProducerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProducer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.stream_producer.v1alpha1.Producer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Producer producer = 1;
 * @return {?proto.stream_producer.v1alpha1.Producer}
 */
proto.stream_producer.v1alpha1.CreateProducerResponse.prototype.getProducer = function() {
  return /** @type{?proto.stream_producer.v1alpha1.Producer} */ (
    jspb.Message.getWrapperField(this, proto.stream_producer.v1alpha1.Producer, 1));
};


/**
 * @param {?proto.stream_producer.v1alpha1.Producer|undefined} value
 * @return {!proto.stream_producer.v1alpha1.CreateProducerResponse} returns this
*/
proto.stream_producer.v1alpha1.CreateProducerResponse.prototype.setProducer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.stream_producer.v1alpha1.CreateProducerResponse} returns this
 */
proto.stream_producer.v1alpha1.CreateProducerResponse.prototype.clearProducer = function() {
  return this.setProducer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_producer.v1alpha1.CreateProducerResponse.prototype.hasProducer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_producer.v1alpha1.GetProducerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_producer.v1alpha1.GetProducerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_producer.v1alpha1.GetProducerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.GetProducerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_producer.v1alpha1.GetProducerRequest}
 */
proto.stream_producer.v1alpha1.GetProducerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_producer.v1alpha1.GetProducerRequest;
  return proto.stream_producer.v1alpha1.GetProducerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_producer.v1alpha1.GetProducerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_producer.v1alpha1.GetProducerRequest}
 */
proto.stream_producer.v1alpha1.GetProducerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_producer.v1alpha1.GetProducerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_producer.v1alpha1.GetProducerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_producer.v1alpha1.GetProducerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.GetProducerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.stream_producer.v1alpha1.GetProducerRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stream_producer.v1alpha1.GetProducerRequest} returns this
 */
proto.stream_producer.v1alpha1.GetProducerRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_producer.v1alpha1.GetProducerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_producer.v1alpha1.GetProducerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_producer.v1alpha1.GetProducerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.GetProducerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    producer: (f = msg.getProducer()) && proto.stream_producer.v1alpha1.Producer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_producer.v1alpha1.GetProducerResponse}
 */
proto.stream_producer.v1alpha1.GetProducerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_producer.v1alpha1.GetProducerResponse;
  return proto.stream_producer.v1alpha1.GetProducerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_producer.v1alpha1.GetProducerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_producer.v1alpha1.GetProducerResponse}
 */
proto.stream_producer.v1alpha1.GetProducerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.stream_producer.v1alpha1.Producer;
      reader.readMessage(value,proto.stream_producer.v1alpha1.Producer.deserializeBinaryFromReader);
      msg.setProducer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_producer.v1alpha1.GetProducerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_producer.v1alpha1.GetProducerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_producer.v1alpha1.GetProducerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.GetProducerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProducer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.stream_producer.v1alpha1.Producer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Producer producer = 1;
 * @return {?proto.stream_producer.v1alpha1.Producer}
 */
proto.stream_producer.v1alpha1.GetProducerResponse.prototype.getProducer = function() {
  return /** @type{?proto.stream_producer.v1alpha1.Producer} */ (
    jspb.Message.getWrapperField(this, proto.stream_producer.v1alpha1.Producer, 1));
};


/**
 * @param {?proto.stream_producer.v1alpha1.Producer|undefined} value
 * @return {!proto.stream_producer.v1alpha1.GetProducerResponse} returns this
*/
proto.stream_producer.v1alpha1.GetProducerResponse.prototype.setProducer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.stream_producer.v1alpha1.GetProducerResponse} returns this
 */
proto.stream_producer.v1alpha1.GetProducerResponse.prototype.clearProducer = function() {
  return this.setProducer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_producer.v1alpha1.GetProducerResponse.prototype.hasProducer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_producer.v1alpha1.ProduceEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_producer.v1alpha1.ProduceEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    producerState: (f = msg.getProducerState()) && proto.stream_producer.v1alpha1.ProducerState.toObject(includeInstance, f),
    streamEventsList: jspb.Message.toObjectList(msg.getStreamEventsList(),
    proto.stream_producer.v1alpha1.StreamEvents.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_producer.v1alpha1.ProduceEventsRequest}
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_producer.v1alpha1.ProduceEventsRequest;
  return proto.stream_producer.v1alpha1.ProduceEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_producer.v1alpha1.ProduceEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_producer.v1alpha1.ProduceEventsRequest}
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdateToken(value);
      break;
    case 2:
      var value = new proto.stream_producer.v1alpha1.ProducerState;
      reader.readMessage(value,proto.stream_producer.v1alpha1.ProducerState.deserializeBinaryFromReader);
      msg.setProducerState(value);
      break;
    case 3:
      var value = new proto.stream_producer.v1alpha1.StreamEvents;
      reader.readMessage(value,proto.stream_producer.v1alpha1.StreamEvents.deserializeBinaryFromReader);
      msg.addStreamEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_producer.v1alpha1.ProduceEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_producer.v1alpha1.ProduceEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdateToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProducerState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.stream_producer.v1alpha1.ProducerState.serializeBinaryToWriter
    );
  }
  f = message.getStreamEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.stream_producer.v1alpha1.StreamEvents.serializeBinaryToWriter
    );
  }
};


/**
 * optional string update_token = 1;
 * @return {string}
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.getUpdateToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stream_producer.v1alpha1.ProduceEventsRequest} returns this
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.setUpdateToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ProducerState producer_state = 2;
 * @return {?proto.stream_producer.v1alpha1.ProducerState}
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.getProducerState = function() {
  return /** @type{?proto.stream_producer.v1alpha1.ProducerState} */ (
    jspb.Message.getWrapperField(this, proto.stream_producer.v1alpha1.ProducerState, 2));
};


/**
 * @param {?proto.stream_producer.v1alpha1.ProducerState|undefined} value
 * @return {!proto.stream_producer.v1alpha1.ProduceEventsRequest} returns this
*/
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.setProducerState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.stream_producer.v1alpha1.ProduceEventsRequest} returns this
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.clearProducerState = function() {
  return this.setProducerState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.hasProducerState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated StreamEvents stream_events = 3;
 * @return {!Array<!proto.stream_producer.v1alpha1.StreamEvents>}
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.getStreamEventsList = function() {
  return /** @type{!Array<!proto.stream_producer.v1alpha1.StreamEvents>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stream_producer.v1alpha1.StreamEvents, 3));
};


/**
 * @param {!Array<!proto.stream_producer.v1alpha1.StreamEvents>} value
 * @return {!proto.stream_producer.v1alpha1.ProduceEventsRequest} returns this
*/
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.setStreamEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.stream_producer.v1alpha1.StreamEvents=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stream_producer.v1alpha1.StreamEvents}
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.addStreamEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.stream_producer.v1alpha1.StreamEvents, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stream_producer.v1alpha1.ProduceEventsRequest} returns this
 */
proto.stream_producer.v1alpha1.ProduceEventsRequest.prototype.clearStreamEventsList = function() {
  return this.setStreamEventsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_producer.v1alpha1.ProduceEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_producer.v1alpha1.ProduceEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_producer.v1alpha1.ProduceEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.ProduceEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_producer.v1alpha1.ProduceEventsResponse}
 */
proto.stream_producer.v1alpha1.ProduceEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_producer.v1alpha1.ProduceEventsResponse;
  return proto.stream_producer.v1alpha1.ProduceEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_producer.v1alpha1.ProduceEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_producer.v1alpha1.ProduceEventsResponse}
 */
proto.stream_producer.v1alpha1.ProduceEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdateToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_producer.v1alpha1.ProduceEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_producer.v1alpha1.ProduceEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_producer.v1alpha1.ProduceEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_producer.v1alpha1.ProduceEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdateToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string update_token = 1;
 * @return {string}
 */
proto.stream_producer.v1alpha1.ProduceEventsResponse.prototype.getUpdateToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stream_producer.v1alpha1.ProduceEventsResponse} returns this
 */
proto.stream_producer.v1alpha1.ProduceEventsResponse.prototype.setUpdateToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.stream_producer.v1alpha1);
