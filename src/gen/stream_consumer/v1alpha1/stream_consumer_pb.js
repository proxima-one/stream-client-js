// source: stream_consumer/v1alpha1/stream_consumer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var model_v1_model_pb = require('../../model/v1/model_pb.js');
goog.object.extend(proto, model_v1_model_pb);
goog.exportSymbol('proto.stream_consumer.v1alpha1.Direction', null, global);
goog.exportSymbol('proto.stream_consumer.v1alpha1.FindOffsetRequest', null, global);
goog.exportSymbol('proto.stream_consumer.v1alpha1.FindOffsetRequest.OffsetFilterCase', null, global);
goog.exportSymbol('proto.stream_consumer.v1alpha1.FindOffsetResponse', null, global);
goog.exportSymbol('proto.stream_consumer.v1alpha1.FindStreamRequest', null, global);
goog.exportSymbol('proto.stream_consumer.v1alpha1.FindStreamResponse', null, global);
goog.exportSymbol('proto.stream_consumer.v1alpha1.GetStateTransitionsRequest', null, global);
goog.exportSymbol('proto.stream_consumer.v1alpha1.GetStateTransitionsResponse', null, global);
goog.exportSymbol('proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest', null, global);
goog.exportSymbol('proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_consumer.v1alpha1.FindStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stream_consumer.v1alpha1.FindStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_consumer.v1alpha1.FindStreamRequest.displayName = 'proto.stream_consumer.v1alpha1.FindStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_consumer.v1alpha1.FindStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stream_consumer.v1alpha1.FindStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_consumer.v1alpha1.FindStreamResponse.displayName = 'proto.stream_consumer.v1alpha1.FindStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.stream_consumer.v1alpha1.FindOffsetRequest.oneofGroups_);
};
goog.inherits(proto.stream_consumer.v1alpha1.FindOffsetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_consumer.v1alpha1.FindOffsetRequest.displayName = 'proto.stream_consumer.v1alpha1.FindOffsetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_consumer.v1alpha1.FindOffsetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stream_consumer.v1alpha1.FindOffsetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_consumer.v1alpha1.FindOffsetResponse.displayName = 'proto.stream_consumer.v1alpha1.FindOffsetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stream_consumer.v1alpha1.GetStateTransitionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.displayName = 'proto.stream_consumer.v1alpha1.GetStateTransitionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.repeatedFields_, null);
};
goog.inherits(proto.stream_consumer.v1alpha1.GetStateTransitionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.displayName = 'proto.stream_consumer.v1alpha1.GetStateTransitionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.displayName = 'proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.repeatedFields_, null);
};
goog.inherits(proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.displayName = 'proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_consumer.v1alpha1.FindStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_consumer.v1alpha1.FindStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_consumer.v1alpha1.FindStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.FindStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_consumer.v1alpha1.FindStreamRequest}
 */
proto.stream_consumer.v1alpha1.FindStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_consumer.v1alpha1.FindStreamRequest;
  return proto.stream_consumer.v1alpha1.FindStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_consumer.v1alpha1.FindStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_consumer.v1alpha1.FindStreamRequest}
 */
proto.stream_consumer.v1alpha1.FindStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_consumer.v1alpha1.FindStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_consumer.v1alpha1.FindStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_consumer.v1alpha1.FindStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.FindStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string stream_id = 1;
 * @return {string}
 */
proto.stream_consumer.v1alpha1.FindStreamRequest.prototype.getStreamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stream_consumer.v1alpha1.FindStreamRequest} returns this
 */
proto.stream_consumer.v1alpha1.FindStreamRequest.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_consumer.v1alpha1.FindStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_consumer.v1alpha1.FindStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_consumer.v1alpha1.FindStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.FindStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && model_v1_model_pb.Stream.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_consumer.v1alpha1.FindStreamResponse}
 */
proto.stream_consumer.v1alpha1.FindStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_consumer.v1alpha1.FindStreamResponse;
  return proto.stream_consumer.v1alpha1.FindStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_consumer.v1alpha1.FindStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_consumer.v1alpha1.FindStreamResponse}
 */
proto.stream_consumer.v1alpha1.FindStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_v1_model_pb.Stream;
      reader.readMessage(value,model_v1_model_pb.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_consumer.v1alpha1.FindStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_consumer.v1alpha1.FindStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_consumer.v1alpha1.FindStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.FindStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_v1_model_pb.Stream.serializeBinaryToWriter
    );
  }
};


/**
 * optional model.v1.Stream stream = 1;
 * @return {?proto.model.v1.Stream}
 */
proto.stream_consumer.v1alpha1.FindStreamResponse.prototype.getStream = function() {
  return /** @type{?proto.model.v1.Stream} */ (
    jspb.Message.getWrapperField(this, model_v1_model_pb.Stream, 1));
};


/**
 * @param {?proto.model.v1.Stream|undefined} value
 * @return {!proto.stream_consumer.v1alpha1.FindStreamResponse} returns this
*/
proto.stream_consumer.v1alpha1.FindStreamResponse.prototype.setStream = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.stream_consumer.v1alpha1.FindStreamResponse} returns this
 */
proto.stream_consumer.v1alpha1.FindStreamResponse.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_consumer.v1alpha1.FindStreamResponse.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.OffsetFilterCase = {
  OFFSET_FILTER_NOT_SET: 0,
  HEIGHT: 2,
  TIMESTAMP: 3
};

/**
 * @return {proto.stream_consumer.v1alpha1.FindOffsetRequest.OffsetFilterCase}
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.getOffsetFilterCase = function() {
  return /** @type {proto.stream_consumer.v1alpha1.FindOffsetRequest.OffsetFilterCase} */(jspb.Message.computeOneofCase(this, proto.stream_consumer.v1alpha1.FindOffsetRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_consumer.v1alpha1.FindOffsetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_consumer.v1alpha1.FindOffsetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: (f = msg.getTimestamp()) && model_v1_model_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_consumer.v1alpha1.FindOffsetRequest}
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_consumer.v1alpha1.FindOffsetRequest;
  return proto.stream_consumer.v1alpha1.FindOffsetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_consumer.v1alpha1.FindOffsetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_consumer.v1alpha1.FindOffsetRequest}
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 3:
      var value = new model_v1_model_pb.Timestamp;
      reader.readMessage(value,model_v1_model_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_consumer.v1alpha1.FindOffsetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_consumer.v1alpha1.FindOffsetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      model_v1_model_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string stream_id = 1;
 * @return {string}
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.getStreamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stream_consumer.v1alpha1.FindOffsetRequest} returns this
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 height = 2;
 * @return {number}
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.stream_consumer.v1alpha1.FindOffsetRequest} returns this
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.setHeight = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.stream_consumer.v1alpha1.FindOffsetRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.stream_consumer.v1alpha1.FindOffsetRequest} returns this
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.clearHeight = function() {
  return jspb.Message.setOneofField(this, 2, proto.stream_consumer.v1alpha1.FindOffsetRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional model.v1.Timestamp timestamp = 3;
 * @return {?proto.model.v1.Timestamp}
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.getTimestamp = function() {
  return /** @type{?proto.model.v1.Timestamp} */ (
    jspb.Message.getWrapperField(this, model_v1_model_pb.Timestamp, 3));
};


/**
 * @param {?proto.model.v1.Timestamp|undefined} value
 * @return {!proto.stream_consumer.v1alpha1.FindOffsetRequest} returns this
*/
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.setTimestamp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.stream_consumer.v1alpha1.FindOffsetRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.stream_consumer.v1alpha1.FindOffsetRequest} returns this
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_consumer.v1alpha1.FindOffsetRequest.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_consumer.v1alpha1.FindOffsetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_consumer.v1alpha1.FindOffsetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_consumer.v1alpha1.FindOffsetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.FindOffsetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: (f = msg.getOffset()) && model_v1_model_pb.Offset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_consumer.v1alpha1.FindOffsetResponse}
 */
proto.stream_consumer.v1alpha1.FindOffsetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_consumer.v1alpha1.FindOffsetResponse;
  return proto.stream_consumer.v1alpha1.FindOffsetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_consumer.v1alpha1.FindOffsetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_consumer.v1alpha1.FindOffsetResponse}
 */
proto.stream_consumer.v1alpha1.FindOffsetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_v1_model_pb.Offset;
      reader.readMessage(value,model_v1_model_pb.Offset.deserializeBinaryFromReader);
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_consumer.v1alpha1.FindOffsetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_consumer.v1alpha1.FindOffsetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_consumer.v1alpha1.FindOffsetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.FindOffsetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_v1_model_pb.Offset.serializeBinaryToWriter
    );
  }
};


/**
 * optional model.v1.Offset offset = 1;
 * @return {?proto.model.v1.Offset}
 */
proto.stream_consumer.v1alpha1.FindOffsetResponse.prototype.getOffset = function() {
  return /** @type{?proto.model.v1.Offset} */ (
    jspb.Message.getWrapperField(this, model_v1_model_pb.Offset, 1));
};


/**
 * @param {?proto.model.v1.Offset|undefined} value
 * @return {!proto.stream_consumer.v1alpha1.FindOffsetResponse} returns this
*/
proto.stream_consumer.v1alpha1.FindOffsetResponse.prototype.setOffset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.stream_consumer.v1alpha1.FindOffsetResponse} returns this
 */
proto.stream_consumer.v1alpha1.FindOffsetResponse.prototype.clearOffset = function() {
  return this.setOffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_consumer.v1alpha1.FindOffsetResponse.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_consumer.v1alpha1.GetStateTransitionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    offset: (f = msg.getOffset()) && model_v1_model_pb.Offset.toObject(includeInstance, f),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_consumer.v1alpha1.GetStateTransitionsRequest}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_consumer.v1alpha1.GetStateTransitionsRequest;
  return proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_consumer.v1alpha1.GetStateTransitionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_consumer.v1alpha1.GetStateTransitionsRequest}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamId(value);
      break;
    case 2:
      var value = new model_v1_model_pb.Offset;
      reader.readMessage(value,model_v1_model_pb.Offset.deserializeBinaryFromReader);
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 4:
      var value = /** @type {!proto.stream_consumer.v1alpha1.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_consumer.v1alpha1.GetStateTransitionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      model_v1_model_pb.Offset.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string stream_id = 1;
 * @return {string}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.getStreamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stream_consumer.v1alpha1.GetStateTransitionsRequest} returns this
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional model.v1.Offset offset = 2;
 * @return {?proto.model.v1.Offset}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.getOffset = function() {
  return /** @type{?proto.model.v1.Offset} */ (
    jspb.Message.getWrapperField(this, model_v1_model_pb.Offset, 2));
};


/**
 * @param {?proto.model.v1.Offset|undefined} value
 * @return {!proto.stream_consumer.v1alpha1.GetStateTransitionsRequest} returns this
*/
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.setOffset = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.stream_consumer.v1alpha1.GetStateTransitionsRequest} returns this
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.clearOffset = function() {
  return this.setOffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 count = 3;
 * @return {number}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.stream_consumer.v1alpha1.GetStateTransitionsRequest} returns this
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Direction direction = 4;
 * @return {!proto.stream_consumer.v1alpha1.Direction}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.getDirection = function() {
  return /** @type {!proto.stream_consumer.v1alpha1.Direction} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.stream_consumer.v1alpha1.Direction} value
 * @return {!proto.stream_consumer.v1alpha1.GetStateTransitionsRequest} returns this
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsRequest.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_consumer.v1alpha1.GetStateTransitionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateTransitionsList: jspb.Message.toObjectList(msg.getStateTransitionsList(),
    model_v1_model_pb.StateTransition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_consumer.v1alpha1.GetStateTransitionsResponse}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_consumer.v1alpha1.GetStateTransitionsResponse;
  return proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_consumer.v1alpha1.GetStateTransitionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_consumer.v1alpha1.GetStateTransitionsResponse}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_v1_model_pb.StateTransition;
      reader.readMessage(value,model_v1_model_pb.StateTransition.deserializeBinaryFromReader);
      msg.addStateTransitions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_consumer.v1alpha1.GetStateTransitionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateTransitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      model_v1_model_pb.StateTransition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated model.v1.StateTransition state_transitions = 1;
 * @return {!Array<!proto.model.v1.StateTransition>}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.prototype.getStateTransitionsList = function() {
  return /** @type{!Array<!proto.model.v1.StateTransition>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_v1_model_pb.StateTransition, 1));
};


/**
 * @param {!Array<!proto.model.v1.StateTransition>} value
 * @return {!proto.stream_consumer.v1alpha1.GetStateTransitionsResponse} returns this
*/
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.prototype.setStateTransitionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.v1.StateTransition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.v1.StateTransition}
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.prototype.addStateTransitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.v1.StateTransition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stream_consumer.v1alpha1.GetStateTransitionsResponse} returns this
 */
proto.stream_consumer.v1alpha1.GetStateTransitionsResponse.prototype.clearStateTransitionsList = function() {
  return this.setStateTransitionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    offset: (f = msg.getOffset()) && model_v1_model_pb.Offset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest;
  return proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamId(value);
      break;
    case 2:
      var value = new model_v1_model_pb.Offset;
      reader.readMessage(value,model_v1_model_pb.Offset.deserializeBinaryFromReader);
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      model_v1_model_pb.Offset.serializeBinaryToWriter
    );
  }
};


/**
 * optional string stream_id = 1;
 * @return {string}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.prototype.getStreamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest} returns this
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional model.v1.Offset offset = 2;
 * @return {?proto.model.v1.Offset}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.prototype.getOffset = function() {
  return /** @type{?proto.model.v1.Offset} */ (
    jspb.Message.getWrapperField(this, model_v1_model_pb.Offset, 2));
};


/**
 * @param {?proto.model.v1.Offset|undefined} value
 * @return {!proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest} returns this
*/
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.prototype.setOffset = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest} returns this
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.prototype.clearOffset = function() {
  return this.setOffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsRequest.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateTransitionList: jspb.Message.toObjectList(msg.getStateTransitionList(),
    model_v1_model_pb.StateTransition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse;
  return proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_v1_model_pb.StateTransition;
      reader.readMessage(value,model_v1_model_pb.StateTransition.deserializeBinaryFromReader);
      msg.addStateTransition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateTransitionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      model_v1_model_pb.StateTransition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated model.v1.StateTransition state_transition = 1;
 * @return {!Array<!proto.model.v1.StateTransition>}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.prototype.getStateTransitionList = function() {
  return /** @type{!Array<!proto.model.v1.StateTransition>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_v1_model_pb.StateTransition, 1));
};


/**
 * @param {!Array<!proto.model.v1.StateTransition>} value
 * @return {!proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse} returns this
*/
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.prototype.setStateTransitionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.v1.StateTransition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.v1.StateTransition}
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.prototype.addStateTransition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.v1.StateTransition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse} returns this
 */
proto.stream_consumer.v1alpha1.StreamStateTransitionsResponse.prototype.clearStateTransitionList = function() {
  return this.setStateTransitionList([]);
};


/**
 * @enum {number}
 */
proto.stream_consumer.v1alpha1.Direction = {
  NEXT: 0,
  LAST: 1
};

goog.object.extend(exports, proto.stream_consumer.v1alpha1);
